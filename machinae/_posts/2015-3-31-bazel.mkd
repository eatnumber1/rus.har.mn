---
layout: post
title: "Bazel: Correct Compilation Made Easy"
excerpt: Bazel's core build language language is largely declarative, and makes it very easy to
         express the dependencies of a target.
keywords: [programming, build systems, bazel]
---

# Bazel: Correct Compilation Made Easy

Back in 2012, I [wrote][designing-robust-build-systems] about the difficulties
creating correct build systems. Recently, Google open-sourced it's internal
build system. Called Blaze internally and Bazel externally, it addresses all of
the concerns that I've had about build systems in the past.

## What's so good about it?

Bazel's sources are written in a subset of Python called the
[Core Build Language], and placed in files named `BUILD`. This language is
largely declarative, and makes it very easy to express the dependencies of a
target. The Bazel [documentation][bazel-deps] talks a great deal about direct vs
indirect dependencies. One of the great things about Bazel is that "the build
tool attempts aggressively to check for missing dependencies and report errors,
but it is not possible for this checking to be complete in all cases." -Bazel's
documentation

## Generating Sources

Using [Skylark], you can also create build rules with custom inputs and outputs.
This enables quite a few use cases which are either hard to support, or entirely
unsupported in build systems I've looked at in the past. These use cases
include:

 * Generating header files, common in kernel build systems.
 * Generating a compiler using a parser & lexer generator such as yacc & flex.
   Nethack does this.

## More Information

You can get more information about Bazel from their website, [bazel.io].

[designing-robust-build-systems]: //blog/2012-05-18/designing-robust-build-systems "Designing Robust Build Systems"
[Core Build Language]: http://bazel.io/docs/build-ref.html#core_build_language "The Core Build Language"
[bazel-deps]: http://bazel.io/docs/build-ref.html#dependencies "Dependencies"
[skylark]: http://bazel.io/docs/skylark/index.html "Skylark"
[bazel.io]: http://bazel.io/ "Bazel: Correct, reproducible, fast builds for everyone."

{% comment %}
vim: ft=liquid sw=4 ts=4 sts=4 tw=100 noet
{% endcomment %}
